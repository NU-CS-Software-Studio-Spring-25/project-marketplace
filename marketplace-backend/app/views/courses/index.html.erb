<div class="container mt-4">
  <h1 class="text-center mb-5" style="color: var(--hinge-primary); font-weight: 700;">@course-catalog</h1>
  
  <div class="mb-4 text-center">
    <%= link_to new_course_path, class: "btn-hinge-primary" do %>
      <i class="fa-solid fa-plus me-2"></i>Add New Course
    <% end %>
  </div>

  <!-- Pagination Controls -->
  <div class="d-flex justify-content-between align-items-center mb-3">
    <div class="text-muted" id="pagination-info">
      Showing 1 - 12 of <%= @courses.count %> courses
    </div>
    
    <!-- Per-page selector -->
    <div class="d-flex align-items-center gap-2">
      <span class="text-muted small">Show:</span>
      <button class="btn btn-sm btn-hinge-outline per-page-btn active" data-per-page="12">12</button>
      <button class="btn btn-sm btn-outline-secondary per-page-btn" data-per-page="24">24</button>
      <button class="btn btn-sm btn-outline-secondary per-page-btn" data-per-page="48">48</button>
    </div>
  </div>

  <div class="row g-3" id="courses-container">
    <% @courses.each_with_index do |course, index| %>
      <div class="course-item" data-index="<%= index %>">
        <div class="card card-hinge h-100">
          <div class="card-header-hinge">
            <span class="course-number-badge"><%= course.course_number %></span>
            <h3 class="course-title"><%= course.name %></h3>
            
            <% if course.labels.any? %>
              <div>
                <% course.labels.each do |label| %>
                  <span class="badge-hinge"><%= label.display_name %></span>
                <% end %>
              </div>
            <% end %>
          </div>
          
          <div class="card-body-hinge">
            <% if course.description.present? %>
              <p><%= course.description.truncate(100) %></p>
            <% end %>
            
            <div class="d-flex justify-content-between align-items-center mt-3">
              <%= link_to course_path(course), class: "btn-hinge-outline" do %>
                <i class="fa-solid fa-circle-info me-1"></i> Details
              <% end %>
              
              <div class="d-flex gap-3">
                <%= link_to edit_course_path(course), class: "btn btn-outline-secondary" do %>
                  <i class="fa-solid fa-pen-to-square"></i>
                <% end %>
                
                <%= button_to course, method: :delete, class: "btn btn-outline-danger", 
                  form: { data: { turbo_confirm: "Are you sure you want to delete this course?" }, class: "d-inline" } do %>
                  <i class="fa-solid fa-trash"></i>
                <% end %>
              </div>
            </div>
          </div>
        </div>
      </div>
    <% end %>
  </div>

  <!-- No courses message -->
  <% if @courses.empty? %>
    <div class="text-center mt-5">
      <div class="text-muted mb-3">
        <i class="fa-solid fa-book fa-3x"></i>
      </div>
      <h3 class="text-muted">No courses found</h3>
      <p class="text-muted">Start by adding your first course to the catalog.</p>
    </div>
  <% end %>

  <!-- Pagination Navigation -->
  <nav aria-label="Course pagination" class="mt-4" id="pagination-nav">
    <div class="d-flex justify-content-center">
      <ul class="pagination" id="pagination-controls">
        <!-- Pagination buttons will be generated by JavaScript -->
      </ul>
    </div>
  </nav>
</div>

<style>
/* Custom pagination styling to match your theme */
.pagination .page-link {
  color: var(--hinge-primary);
  border-color: var(--hinge-primary);
}

.pagination .page-item.active .page-link {
  background-color: var(--hinge-primary);
  border-color: var(--hinge-primary);
  color: white;
}

.pagination .page-link:hover {
  color: var(--hinge-primary);
  background-color: rgba(var(--hinge-primary-rgb), 0.1);
  border-color: var(--hinge-primary);
}

.per-page-btn.active {
  background-color: var(--hinge-primary) !important;
  border-color: var(--hinge-primary) !important;
  color: white;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let currentPage = 1;
  let itemsPerPage = 12;
  const totalItems = <%= @courses.count %>;
  
  function updatePagination() {
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = Math.min(startIndex + itemsPerPage, totalItems);
    
    // Update pagination info
    document.getElementById('pagination-info').textContent = 
      `Showing ${startIndex + 1} - ${endIndex} of ${totalItems} courses`;
    
    // Show/hide course items
    document.querySelectorAll('.course-item').forEach((item, index) => {
      if (index >= startIndex && index < endIndex) {
        item.style.display = 'block';
      } else {
        item.style.display = 'none';
      }
    });
    
    // Update pagination controls
    updatePaginationControls(totalPages);
  }
  
  function updatePaginationControls(totalPages) {
    const paginationContainer = document.getElementById('pagination-controls');
    paginationContainer.innerHTML = '';
    
    if (totalPages <= 1) {
      document.getElementById('pagination-nav').style.display = 'none';
      return;
    }
    
    document.getElementById('pagination-nav').style.display = 'block';
    
    // Previous button
    const prevLi = document.createElement('li');
    prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
    prevLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage - 1}">Previous</a>`;
    paginationContainer.appendChild(prevLi);
    
    // Page numbers
    const startPage = Math.max(1, currentPage - 2);
    const endPage = Math.min(totalPages, currentPage + 2);
    
    if (startPage > 1) {
      const firstLi = document.createElement('li');
      firstLi.className = 'page-item';
      firstLi.innerHTML = '<a class="page-link" href="#" data-page="1">1</a>';
      paginationContainer.appendChild(firstLi);
      
      if (startPage > 2) {
        const ellipsisLi = document.createElement('li');
        ellipsisLi.className = 'page-item disabled';
        ellipsisLi.innerHTML = '<span class="page-link">...</span>';
        paginationContainer.appendChild(ellipsisLi);
      }
    }
    
    for (let i = startPage; i <= endPage; i++) {
      const li = document.createElement('li');
      li.className = `page-item ${i === currentPage ? 'active' : ''}`;
      li.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
      paginationContainer.appendChild(li);
    }
    
    if (endPage < totalPages) {
      if (endPage < totalPages - 1) {
        const ellipsisLi = document.createElement('li');
        ellipsisLi.className = 'page-item disabled';
        ellipsisLi.innerHTML = '<span class="page-link">...</span>';
        paginationContainer.appendChild(ellipsisLi);
      }
      
      const lastLi = document.createElement('li');
      lastLi.className = 'page-item';
      lastLi.innerHTML = `<a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a>`;
      paginationContainer.appendChild(lastLi);
    }
    
    // Next button
    const nextLi = document.createElement('li');
    nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
    nextLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage + 1}">Next</a>`;
    paginationContainer.appendChild(nextLi);
  }
  
  // Handle per-page button clicks
  document.querySelectorAll('.per-page-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      // Update active state
      document.querySelectorAll('.per-page-btn').forEach(b => {
        b.classList.remove('active', 'btn-hinge-outline');
        b.classList.add('btn-outline-secondary');
      });
      this.classList.add('active', 'btn-hinge-outline');
      this.classList.remove('btn-outline-secondary');
      
      // Update items per page
      itemsPerPage = parseInt(this.dataset.perPage);
      currentPage = 1; // Reset to first page
      updatePagination();
    });
  });
  
  // Handle pagination clicks
  document.addEventListener('click', function(e) {
    if (e.target.matches('#pagination-controls a[data-page]')) {
      e.preventDefault();
      const page = parseInt(e.target.dataset.page);
      if (page && page !== currentPage) {
        currentPage = page;
        updatePagination();
        // Scroll to top of courses
        document.getElementById('courses-container').scrollIntoView({ behavior: 'smooth' });
      }
    }
  });
  
  // Initial pagination setup
  updatePagination();
});
</script>